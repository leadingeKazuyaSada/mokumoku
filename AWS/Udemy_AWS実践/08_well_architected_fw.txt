VPC を分ける基準
- マルチ VPC 方式 (サービスごと, 機能ごと, etc.)
- マルチアカウント方式 (アカウントごと)

5つの設計原則
- Reliability
	- 障害による中断・復旧の影響を軽減する。
	- オートスケール、モニタリングと自動化。
- Performance Efficiency
	- リソースの効率化、最適化。
	- AWS の新機能を検討する。
- Security
- Cost Optimization
- Operational Excellence

ベストプラクティス
1. スケーラビリティの確保
2. 環境の自動化
3. 使い捨てリソースの使用
4. コンポーネントの疎結合
	- SNS, SQS 等のメッセージングを使う。
5. サーバレス
	- なるべくサーバを持たない。
6. 最適なデータベース選択
7. 増大するデータ量への対応
8. 単一障害点の排除
	- ELB を使って高可用性を保つ。
9. コスト最適化
10. キャッシュの利用
	- Cloud Front, ElastiCache
11. セキュリティの確保

ケーススタディ1
- マルチ AZ にする。✔
- IGW の後ろに ELB を入れる。✔
- DB サーバを自動でレプリケーションする。✗
	> DB サーバを RDS に変えて、自動フェイルオーバーするようにする。

ケーススタディ2
> VPN 接続が単一障害点になっている。
> VPN 接続を二重化する (?)

ケーススタディ3
> VPC を分ける。

